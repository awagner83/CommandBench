#!/bin/env python
#------------------------------------------------------------------------#
# CommandBench - All-purpose command-line application benchmarking tool
# Copyright (C) 2009-2010 Adam Wagner <awagner83@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#------------------------------------------------------------------------#

"""CLI interface to CommandBench"""

from glob import glob
from itertools import chain
from optparse import OptionParser

from commandbench.process import Controller
from commandbench import about


def main():
    """The make-it-happen method."""
    
    # Parse command-line opts
    parser = OptionParser('Usage: %prog [options] "COMMAND" '
                          '["COMMAND_2"] .. ["COMMAND_N"]', 
            version=about.NAME + ' ' + about.VERSION )
    parser.add_option('-n', '--number', dest='repetitions', type='int',
            help='number of times to repeat COMMAND (default: 1)', default=1)
    parser.add_option('-c', '--concurrency', type='int', default=1,
            help='maximum number of processes to run simultaneously '
                 '(default: 1)')
    parser.add_option('-q', '--quiet', action='count', default=0,
            help='Suppress intro and only output final benchmark data')
    parser.add_option('-a', '--args',
            help='Run given command once for, and with, the given arg list.  '
                 'NOTE - only one command can be specified when using this '
                 'option.')
    parser.add_option('-f', '--files',
            help='Run given command once for each file given (similar to -a)')
    options, commands = parser.parse_args()

    if len(commands):
        # Check for 'xargs-style' mode
        if options.args or options.files:
            if len(commands) > 1:
                parser.error("only one command can be specified when using "
                        "the -a (--args) option")

            if options.args and options.files:
                parser.error("only one of -f/-a can be used at once.")

            if options.files:
                args = list(chain(*(glob(file) 
                        for file in options.files.split())))
            else:
                args = options.args.split()

            # build new command list
            commands = ["%s %s" % (commands[0], arg) for arg in args]

        # Create controller and execute
        Controller(commands, options.repetitions, options.concurrency,
                vars(options)).run()
    else:
        print about.COPYRIGHT_LINE, "\n"
        parser.print_help()


if __name__ == '__main__': 
    main()

